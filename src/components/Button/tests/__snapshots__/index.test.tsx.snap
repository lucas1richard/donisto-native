// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Button /> renders a loader 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Button
    color="_default"
    onPress={[MockFunction]}
    showLoader={true}
    title="mockTitle"
    variant="default"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {},
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<Button /> renders with a contained variant 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Button
    color="_default"
    onPress={[MockFunction]}
    title="mockTitle"
    variant="text"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "children": <Component
        style={Object {}}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#000",
            }
          }
        >
          mockTitle
        </Text>
      </Component>,
      "onPress": [MockFunction],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          undefined,
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#000",
              }
            }
          >
            mockTitle
          </Text>,
        ],
        "style": Object {},
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "accessible": true,
            "allowFontScaling": true,
            "children": "mockTitle",
            "ellipsizeMode": "tail",
            "style": Object {
              "color": "#000",
            },
          },
          "ref": null,
          "rendered": "mockTitle",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "children": <Component
          style={Object {}}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#000",
              }
            }
          >
            mockTitle
          </Text>
        </Component>,
        "onPress": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            undefined,
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#000",
                }
              }
            >
              mockTitle
            </Text>,
          ],
          "style": Object {},
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "accessible": true,
              "allowFontScaling": true,
              "children": "mockTitle",
              "ellipsizeMode": "tail",
              "style": Object {
                "color": "#000",
              },
            },
            "ref": null,
            "rendered": "mockTitle",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<Button /> renders with a outlined variant 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Button
    color="_default"
    onPress={[MockFunction]}
    title="mockTitle"
    variant="text"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "children": <Component
        style={Object {}}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#000",
            }
          }
        >
          mockTitle
        </Text>
      </Component>,
      "onPress": [MockFunction],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          undefined,
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#000",
              }
            }
          >
            mockTitle
          </Text>,
        ],
        "style": Object {},
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "accessible": true,
            "allowFontScaling": true,
            "children": "mockTitle",
            "ellipsizeMode": "tail",
            "style": Object {
              "color": "#000",
            },
          },
          "ref": null,
          "rendered": "mockTitle",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "children": <Component
          style={Object {}}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#000",
              }
            }
          >
            mockTitle
          </Text>
        </Component>,
        "onPress": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            undefined,
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#000",
                }
              }
            >
              mockTitle
            </Text>,
          ],
          "style": Object {},
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "accessible": true,
              "allowFontScaling": true,
              "children": "mockTitle",
              "ellipsizeMode": "tail",
              "style": Object {
                "color": "#000",
              },
            },
            "ref": null,
            "rendered": "mockTitle",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<Button /> renders with a primary color 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Button
    color="primary"
    onPress={[MockFunction]}
    title="mockTitle"
    variant="text"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "children": <Component
        style={Object {}}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "borderBottomColor": "rgb(238, 135, 119)",
              "borderBottomWidth": 1,
              "color": "rgb(238, 135, 119)",
            }
          }
        >
          mockTitle
        </Text>
      </Component>,
      "onPress": [MockFunction],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          undefined,
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "borderBottomColor": "rgb(238, 135, 119)",
                "borderBottomWidth": 1,
                "color": "rgb(238, 135, 119)",
              }
            }
          >
            mockTitle
          </Text>,
        ],
        "style": Object {},
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "accessible": true,
            "allowFontScaling": true,
            "children": "mockTitle",
            "ellipsizeMode": "tail",
            "style": Object {
              "borderBottomColor": "rgb(238, 135, 119)",
              "borderBottomWidth": 1,
              "color": "rgb(238, 135, 119)",
            },
          },
          "ref": null,
          "rendered": "mockTitle",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "children": <Component
          style={Object {}}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "borderBottomColor": "rgb(238, 135, 119)",
                "borderBottomWidth": 1,
                "color": "rgb(238, 135, 119)",
              }
            }
          >
            mockTitle
          </Text>
        </Component>,
        "onPress": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            undefined,
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "borderBottomColor": "rgb(238, 135, 119)",
                  "borderBottomWidth": 1,
                  "color": "rgb(238, 135, 119)",
                }
              }
            >
              mockTitle
            </Text>,
          ],
          "style": Object {},
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "accessible": true,
              "allowFontScaling": true,
              "children": "mockTitle",
              "ellipsizeMode": "tail",
              "style": Object {
                "borderBottomColor": "rgb(238, 135, 119)",
                "borderBottomWidth": 1,
                "color": "rgb(238, 135, 119)",
              },
            },
            "ref": null,
            "rendered": "mockTitle",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<Button /> renders with a rounded variant 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Button
    color="_default"
    onPress={[MockFunction]}
    title="mockTitle"
    variant="text"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "children": <Component
        style={Object {}}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#000",
            }
          }
        >
          mockTitle
        </Text>
      </Component>,
      "onPress": [MockFunction],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          undefined,
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#000",
              }
            }
          >
            mockTitle
          </Text>,
        ],
        "style": Object {},
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "accessible": true,
            "allowFontScaling": true,
            "children": "mockTitle",
            "ellipsizeMode": "tail",
            "style": Object {
              "color": "#000",
            },
          },
          "ref": null,
          "rendered": "mockTitle",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "children": <Component
          style={Object {}}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#000",
              }
            }
          >
            mockTitle
          </Text>
        </Component>,
        "onPress": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            undefined,
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#000",
                }
              }
            >
              mockTitle
            </Text>,
          ],
          "style": Object {},
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "accessible": true,
              "allowFontScaling": true,
              "children": "mockTitle",
              "ellipsizeMode": "tail",
              "style": Object {
                "color": "#000",
              },
            },
            "ref": null,
            "rendered": "mockTitle",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<Button /> renders with a secondary color 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Button
    color="secondary"
    onPress={[MockFunction]}
    title="mockTitle"
    variant="text"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "children": <Component
        style={Object {}}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#ffa726",
            }
          }
        >
          mockTitle
        </Text>
      </Component>,
      "onPress": [MockFunction],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          undefined,
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#ffa726",
              }
            }
          >
            mockTitle
          </Text>,
        ],
        "style": Object {},
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "accessible": true,
            "allowFontScaling": true,
            "children": "mockTitle",
            "ellipsizeMode": "tail",
            "style": Object {
              "color": "#ffa726",
            },
          },
          "ref": null,
          "rendered": "mockTitle",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "children": <Component
          style={Object {}}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#ffa726",
              }
            }
          >
            mockTitle
          </Text>
        </Component>,
        "onPress": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            undefined,
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#ffa726",
                }
              }
            >
              mockTitle
            </Text>,
          ],
          "style": Object {},
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "accessible": true,
              "allowFontScaling": true,
              "children": "mockTitle",
              "ellipsizeMode": "tail",
              "style": Object {
                "color": "#ffa726",
              },
            },
            "ref": null,
            "rendered": "mockTitle",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<Button /> renders with a text variant 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Button
    color="_default"
    onPress={[MockFunction]}
    title="mockTitle"
    variant="text"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "children": <Component
        style={Object {}}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#000",
            }
          }
        >
          mockTitle
        </Text>
      </Component>,
      "onPress": [MockFunction],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          undefined,
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#000",
              }
            }
          >
            mockTitle
          </Text>,
        ],
        "style": Object {},
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "accessible": true,
            "allowFontScaling": true,
            "children": "mockTitle",
            "ellipsizeMode": "tail",
            "style": Object {
              "color": "#000",
            },
          },
          "ref": null,
          "rendered": "mockTitle",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "children": <Component
          style={Object {}}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#000",
              }
            }
          >
            mockTitle
          </Text>
        </Component>,
        "onPress": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            undefined,
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#000",
                }
              }
            >
              mockTitle
            </Text>,
          ],
          "style": Object {},
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "accessible": true,
              "allowFontScaling": true,
              "children": "mockTitle",
              "ellipsizeMode": "tail",
              "style": Object {
                "color": "#000",
              },
            },
            "ref": null,
            "rendered": "mockTitle",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<Button /> renders with a title 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Button
    color="_default"
    onPress={[MockFunction]}
    title="mockTitle"
    variant="default"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "children": <Component
        style={
          Array [
            Object {
              "alignItems": "center",
              "backgroundColor": "#f2f2f2",
              "borderRadius": 8,
              "flexDirection": "row",
              "height": 46,
              "justifyContent": "center",
              "width": "100%",
            },
            Object {
              "alignItems": "center",
              "backgroundColor": "#f2f2f2",
              "borderRadius": 8,
              "flexDirection": "row",
              "height": 46,
              "justifyContent": "center",
              "width": "100%",
            },
          ]
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#000",
              "fontSize": 20,
            }
          }
        >
          mockTitle
        </Text>
      </Component>,
      "onPress": [MockFunction],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          undefined,
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#000",
                "fontSize": 20,
              }
            }
          >
            mockTitle
          </Text>,
        ],
        "style": Array [
          Object {
            "alignItems": "center",
            "backgroundColor": "#f2f2f2",
            "borderRadius": 8,
            "flexDirection": "row",
            "height": 46,
            "justifyContent": "center",
            "width": "100%",
          },
          Object {
            "alignItems": "center",
            "backgroundColor": "#f2f2f2",
            "borderRadius": 8,
            "flexDirection": "row",
            "height": 46,
            "justifyContent": "center",
            "width": "100%",
          },
        ],
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "accessible": true,
            "allowFontScaling": true,
            "children": "mockTitle",
            "ellipsizeMode": "tail",
            "style": Object {
              "color": "#000",
              "fontSize": 20,
            },
          },
          "ref": null,
          "rendered": "mockTitle",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "children": <Component
          style={
            Array [
              Object {
                "alignItems": "center",
                "backgroundColor": "#f2f2f2",
                "borderRadius": 8,
                "flexDirection": "row",
                "height": 46,
                "justifyContent": "center",
                "width": "100%",
              },
              Object {
                "alignItems": "center",
                "backgroundColor": "#f2f2f2",
                "borderRadius": 8,
                "flexDirection": "row",
                "height": 46,
                "justifyContent": "center",
                "width": "100%",
              },
            ]
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#000",
                "fontSize": 20,
              }
            }
          >
            mockTitle
          </Text>
        </Component>,
        "onPress": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            undefined,
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#000",
                  "fontSize": 20,
                }
              }
            >
              mockTitle
            </Text>,
          ],
          "style": Array [
            Object {
              "alignItems": "center",
              "backgroundColor": "#f2f2f2",
              "borderRadius": 8,
              "flexDirection": "row",
              "height": 46,
              "justifyContent": "center",
              "width": "100%",
            },
            Object {
              "alignItems": "center",
              "backgroundColor": "#f2f2f2",
              "borderRadius": 8,
              "flexDirection": "row",
              "height": 46,
              "justifyContent": "center",
              "width": "100%",
            },
          ],
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "accessible": true,
              "allowFontScaling": true,
              "children": "mockTitle",
              "ellipsizeMode": "tail",
              "style": Object {
                "color": "#000",
                "fontSize": 20,
              },
            },
            "ref": null,
            "rendered": "mockTitle",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<Button /> renders with an icon 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Button
    color="_default"
    icon="mockIcon"
    onPress={[MockFunction]}
    title="mockTitle"
    variant="default"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "children": <Component
        style={
          Array [
            Object {
              "alignItems": "center",
              "backgroundColor": "#f2f2f2",
              "borderRadius": 8,
              "flexDirection": "row",
              "height": 46,
              "justifyContent": "center",
              "width": "100%",
            },
            Object {
              "alignItems": "center",
              "backgroundColor": "#f2f2f2",
              "borderRadius": 8,
              "flexDirection": "row",
              "height": 46,
              "justifyContent": "center",
              "width": "100%",
            },
          ]
        }
      >
        <Component
          style={
            Object {
              "marginRight": 20,
            }
          }
        >
          mockIcon
        </Component>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#000",
              "fontSize": 20,
            }
          }
        >
          mockTitle
        </Text>
      </Component>,
      "onPress": [MockFunction],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Component
            style={
              Object {
                "marginRight": 20,
              }
            }
          >
            mockIcon
          </Component>,
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#000",
                "fontSize": 20,
              }
            }
          >
            mockTitle
          </Text>,
        ],
        "style": Array [
          Object {
            "alignItems": "center",
            "backgroundColor": "#f2f2f2",
            "borderRadius": 8,
            "flexDirection": "row",
            "height": 46,
            "justifyContent": "center",
            "width": "100%",
          },
          Object {
            "alignItems": "center",
            "backgroundColor": "#f2f2f2",
            "borderRadius": 8,
            "flexDirection": "row",
            "height": 46,
            "justifyContent": "center",
            "width": "100%",
          },
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "mockIcon",
            "style": Object {
              "marginRight": 20,
            },
          },
          "ref": null,
          "rendered": "mockIcon",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "accessible": true,
            "allowFontScaling": true,
            "children": "mockTitle",
            "ellipsizeMode": "tail",
            "style": Object {
              "color": "#000",
              "fontSize": 20,
            },
          },
          "ref": null,
          "rendered": "mockTitle",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "children": <Component
          style={
            Array [
              Object {
                "alignItems": "center",
                "backgroundColor": "#f2f2f2",
                "borderRadius": 8,
                "flexDirection": "row",
                "height": 46,
                "justifyContent": "center",
                "width": "100%",
              },
              Object {
                "alignItems": "center",
                "backgroundColor": "#f2f2f2",
                "borderRadius": 8,
                "flexDirection": "row",
                "height": 46,
                "justifyContent": "center",
                "width": "100%",
              },
            ]
          }
        >
          <Component
            style={
              Object {
                "marginRight": 20,
              }
            }
          >
            mockIcon
          </Component>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#000",
                "fontSize": 20,
              }
            }
          >
            mockTitle
          </Text>
        </Component>,
        "onPress": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Component
              style={
                Object {
                  "marginRight": 20,
                }
              }
            >
              mockIcon
            </Component>,
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#000",
                  "fontSize": 20,
                }
              }
            >
              mockTitle
            </Text>,
          ],
          "style": Array [
            Object {
              "alignItems": "center",
              "backgroundColor": "#f2f2f2",
              "borderRadius": 8,
              "flexDirection": "row",
              "height": 46,
              "justifyContent": "center",
              "width": "100%",
            },
            Object {
              "alignItems": "center",
              "backgroundColor": "#f2f2f2",
              "borderRadius": 8,
              "flexDirection": "row",
              "height": 46,
              "justifyContent": "center",
              "width": "100%",
            },
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "mockIcon",
              "style": Object {
                "marginRight": 20,
              },
            },
            "ref": null,
            "rendered": "mockIcon",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "accessible": true,
              "allowFontScaling": true,
              "children": "mockTitle",
              "ellipsizeMode": "tail",
              "style": Object {
                "color": "#000",
                "fontSize": 20,
              },
            },
            "ref": null,
            "rendered": "mockTitle",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
