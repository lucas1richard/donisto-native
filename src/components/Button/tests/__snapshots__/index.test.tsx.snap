// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Button /> renders a loader 1`] = `<Loader />`;

exports[`<Button /> renders with a contained variant 1`] = `
<TouchableOpacity
  activeOpacity={0.2}
  onPress={[MockFunction]}
>
  <Component
    style={Object {}}
  >
    <Component
      style={
        Object {
          "color": "#000",
        }
      }
    >
      mockTitle
    </Component>
  </Component>
</TouchableOpacity>
`;

exports[`<Button /> renders with a outlined variant 1`] = `
<TouchableOpacity
  activeOpacity={0.2}
  onPress={[MockFunction]}
>
  <Component
    style={Object {}}
  >
    <Component
      style={
        Object {
          "color": "#000",
        }
      }
    >
      mockTitle
    </Component>
  </Component>
</TouchableOpacity>
`;

exports[`<Button /> renders with a primary color 1`] = `
<TouchableOpacity
  activeOpacity={0.2}
  onPress={[MockFunction]}
>
  <Component
    style={Object {}}
  >
    <Component
      style={
        Object {
          "borderBottomColor": "rgb(238, 135, 119)",
          "borderBottomWidth": 1,
          "color": "rgb(238, 135, 119)",
        }
      }
    >
      mockTitle
    </Component>
  </Component>
</TouchableOpacity>
`;

exports[`<Button /> renders with a rounded variant 1`] = `
<TouchableOpacity
  activeOpacity={0.2}
  onPress={[MockFunction]}
>
  <Component
    style={Object {}}
  >
    <Component
      style={
        Object {
          "color": "#000",
        }
      }
    >
      mockTitle
    </Component>
  </Component>
</TouchableOpacity>
`;

exports[`<Button /> renders with a secondary color 1`] = `
<TouchableOpacity
  activeOpacity={0.2}
  onPress={[MockFunction]}
>
  <Component
    style={Object {}}
  >
    <Component
      style={
        Object {
          "color": "#ffa726",
        }
      }
    >
      mockTitle
    </Component>
  </Component>
</TouchableOpacity>
`;

exports[`<Button /> renders with a text variant 1`] = `
<TouchableOpacity
  activeOpacity={0.2}
  onPress={[MockFunction]}
>
  <Component
    style={Object {}}
  >
    <Component
      style={
        Object {
          "color": "#000",
        }
      }
    >
      mockTitle
    </Component>
  </Component>
</TouchableOpacity>
`;

exports[`<Button /> renders with a title 1`] = `
<TouchableOpacity
  activeOpacity={0.2}
  onPress={[MockFunction]}
>
  <Component
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "#f2f2f2",
          "borderRadius": 8,
          "flexDirection": "row",
          "height": 46,
          "justifyContent": "center",
          "width": "100%",
        },
        Object {
          "alignItems": "center",
          "backgroundColor": "#f2f2f2",
          "borderRadius": 8,
          "flexDirection": "row",
          "height": 46,
          "justifyContent": "center",
          "width": "100%",
        },
      ]
    }
  >
    <Component
      style={
        Object {
          "color": "#000",
          "fontSize": 20,
        }
      }
    >
      mockTitle
    </Component>
  </Component>
</TouchableOpacity>
`;

exports[`<Button /> renders with an icon 1`] = `
<TouchableOpacity
  activeOpacity={0.2}
  onPress={[MockFunction]}
>
  <Component
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "#f2f2f2",
          "borderRadius": 8,
          "flexDirection": "row",
          "height": 46,
          "justifyContent": "center",
          "width": "100%",
        },
        Object {
          "alignItems": "center",
          "backgroundColor": "#f2f2f2",
          "borderRadius": 8,
          "flexDirection": "row",
          "height": 46,
          "justifyContent": "center",
          "width": "100%",
        },
      ]
    }
  >
    <Component
      style={
        Object {
          "marginRight": 20,
        }
      }
    >
      mockIcon
    </Component>
    <Component
      style={
        Object {
          "color": "#000",
          "fontSize": 20,
        }
      }
    >
      mockTitle
    </Component>
  </Component>
</TouchableOpacity>
`;
