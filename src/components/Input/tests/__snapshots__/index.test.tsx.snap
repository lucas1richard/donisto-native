// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Input /> blurViewProps renders with blurViewProps 1`] = `
<Component>
  <BlurView
    intensity={80}
    style={
      Array [
        Object {
          "borderRadius": 12,
        },
        undefined,
      ]
    }
    tint="light"
  >
    <Component
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        allowFontScaling={false}
        error=""
        name="mockName"
        numberOfLines={1}
        onBlur={[Function]}
        onChange={[MockFunction]}
        onChangeText={[MockFunction]}
        onDragStart={[MockFunction]}
        onDrop={[MockFunction]}
        onFocus={[Function]}
        placeholderTextColor="#333"
        returnKeyType="next"
        style={
          Object {
            "color": "#000",
            "flex": 14,
            "fontSize": 18,
            "minHeight": undefined,
            "padding": 20,
          }
        }
        textAlignVertical="center"
        underlineColorAndroid="transparent"
        value="mockValue"
      />
    </Component>
  </BlurView>
</Component>
`;

exports[`<Input /> renders 1`] = `
<Component>
  <BlurView
    intensity={80}
    style={
      Array [
        Object {
          "borderRadius": 12,
        },
        undefined,
      ]
    }
    tint="default"
  >
    <Component
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        allowFontScaling={false}
        error=""
        name="mockName"
        numberOfLines={1}
        onBlur={[Function]}
        onChange={[MockFunction]}
        onChangeText={[MockFunction]}
        onDragStart={[MockFunction]}
        onDrop={[MockFunction]}
        onFocus={[Function]}
        placeholderTextColor="#bbb"
        returnKeyType="next"
        style={
          Object {
            "color": "#fff",
            "flex": 14,
            "fontSize": 18,
            "minHeight": undefined,
            "padding": 20,
          }
        }
        textAlignVertical="center"
        underlineColorAndroid="transparent"
        value="mockValue"
      />
    </Component>
  </BlurView>
</Component>
`;

exports[`<Input /> renders multiline 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Input
    input={
      Object {
        "name": "mockName",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "onDragStart": [MockFunction],
        "onDrop": [MockFunction],
        "onFocus": [MockFunction],
        "value": "mockValue",
      }
    }
    meta={
      Object {
        "asyncValidating": false,
        "autofilled": false,
        "dirty": false,
        "dispatch": [MockFunction],
        "form": "mockForm",
        "initial": "",
        "invalid": false,
        "pristine": true,
        "submitFailed": false,
        "submitting": false,
        "touched": false,
        "valid": true,
        "visited": false,
      }
    }
    multiline={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <BlurView
        intensity={80}
        style={
          Array [
            Object {
              "borderRadius": 12,
            },
            undefined,
          ]
        }
        tint="default"
      >
        <Component
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            }
          }
        >
          <TextInput
            allowFontScaling={false}
            error=""
            name="mockName"
            numberOfLines={1}
            onBlur={[Function]}
            onChange={[MockFunction]}
            onChangeText={[MockFunction]}
            onDragStart={[MockFunction]}
            onDrop={[MockFunction]}
            onFocus={[Function]}
            placeholderTextColor="#bbb"
            returnKeyType="next"
            style={
              Object {
                "color": "#fff",
                "flex": 14,
                "fontSize": 18,
                "minHeight": undefined,
                "padding": 20,
              }
            }
            textAlignVertical="center"
            underlineColorAndroid="transparent"
            value="mockValue"
          />
        </Component>
      </BlurView>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Component
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            }
          }
        >
          <TextInput
            allowFontScaling={false}
            error=""
            name="mockName"
            numberOfLines={1}
            onBlur={[Function]}
            onChange={[MockFunction]}
            onChangeText={[MockFunction]}
            onDragStart={[MockFunction]}
            onDrop={[MockFunction]}
            onFocus={[Function]}
            placeholderTextColor="#bbb"
            returnKeyType="next"
            style={
              Object {
                "color": "#fff",
                "flex": 14,
                "fontSize": 18,
                "minHeight": undefined,
                "padding": 20,
              }
            }
            textAlignVertical="center"
            underlineColorAndroid="transparent"
            value="mockValue"
          />
        </Component>,
        "intensity": 80,
        "style": Array [
          Object {
            "borderRadius": 12,
          },
          undefined,
        ],
        "tint": "default",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            false,
            <TextInput
              allowFontScaling={false}
              error=""
              name="mockName"
              numberOfLines={1}
              onBlur={[Function]}
              onChange={[MockFunction]}
              onChangeText={[MockFunction]}
              onDragStart={[MockFunction]}
              onDrop={[MockFunction]}
              onFocus={[Function]}
              placeholderTextColor="#bbb"
              returnKeyType="next"
              style={
                Object {
                  "color": "#fff",
                  "flex": 14,
                  "fontSize": 18,
                  "minHeight": undefined,
                  "padding": 20,
                }
              }
              textAlignVertical="center"
              underlineColorAndroid="transparent"
              value="mockValue"
            />,
          ],
          "style": Object {
            "alignItems": "center",
            "flexDirection": "row",
          },
        },
        "ref": null,
        "rendered": Array [
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "allowFontScaling": false,
              "error": "",
              "label": undefined,
              "multiline": undefined,
              "name": "mockName",
              "numberOfLines": 1,
              "onBlur": [Function],
              "onChange": [MockFunction],
              "onChangeText": [MockFunction],
              "onDragStart": [MockFunction],
              "onDrop": [MockFunction],
              "onFocus": [Function],
              "placeholder": undefined,
              "placeholderTextColor": "#bbb",
              "returnKeyType": "next",
              "style": Object {
                "color": "#fff",
                "flex": 14,
                "fontSize": 18,
                "minHeight": undefined,
                "padding": 20,
              },
              "textAlignVertical": "center",
              "underlineColorAndroid": "transparent",
              "value": "mockValue",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <BlurView
          intensity={80}
          style={
            Array [
              Object {
                "borderRadius": 12,
              },
              undefined,
            ]
          }
          tint="default"
        >
          <Component
            style={
              Object {
                "alignItems": "center",
                "flexDirection": "row",
              }
            }
          >
            <TextInput
              allowFontScaling={false}
              error=""
              name="mockName"
              numberOfLines={1}
              onBlur={[Function]}
              onChange={[MockFunction]}
              onChangeText={[MockFunction]}
              onDragStart={[MockFunction]}
              onDrop={[MockFunction]}
              onFocus={[Function]}
              placeholderTextColor="#bbb"
              returnKeyType="next"
              style={
                Object {
                  "color": "#fff",
                  "flex": 14,
                  "fontSize": 18,
                  "minHeight": undefined,
                  "padding": 20,
                }
              }
              textAlignVertical="center"
              underlineColorAndroid="transparent"
              value="mockValue"
            />
          </Component>
        </BlurView>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Component
            style={
              Object {
                "alignItems": "center",
                "flexDirection": "row",
              }
            }
          >
            <TextInput
              allowFontScaling={false}
              error=""
              name="mockName"
              numberOfLines={1}
              onBlur={[Function]}
              onChange={[MockFunction]}
              onChangeText={[MockFunction]}
              onDragStart={[MockFunction]}
              onDrop={[MockFunction]}
              onFocus={[Function]}
              placeholderTextColor="#bbb"
              returnKeyType="next"
              style={
                Object {
                  "color": "#fff",
                  "flex": 14,
                  "fontSize": 18,
                  "minHeight": undefined,
                  "padding": 20,
                }
              }
              textAlignVertical="center"
              underlineColorAndroid="transparent"
              value="mockValue"
            />
          </Component>,
          "intensity": 80,
          "style": Array [
            Object {
              "borderRadius": 12,
            },
            undefined,
          ],
          "tint": "default",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              false,
              <TextInput
                allowFontScaling={false}
                error=""
                name="mockName"
                numberOfLines={1}
                onBlur={[Function]}
                onChange={[MockFunction]}
                onChangeText={[MockFunction]}
                onDragStart={[MockFunction]}
                onDrop={[MockFunction]}
                onFocus={[Function]}
                placeholderTextColor="#bbb"
                returnKeyType="next"
                style={
                  Object {
                    "color": "#fff",
                    "flex": 14,
                    "fontSize": 18,
                    "minHeight": undefined,
                    "padding": 20,
                  }
                }
                textAlignVertical="center"
                underlineColorAndroid="transparent"
                value="mockValue"
              />,
            ],
            "style": Object {
              "alignItems": "center",
              "flexDirection": "row",
            },
          },
          "ref": null,
          "rendered": Array [
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "allowFontScaling": false,
                "error": "",
                "label": undefined,
                "multiline": undefined,
                "name": "mockName",
                "numberOfLines": 1,
                "onBlur": [Function],
                "onChange": [MockFunction],
                "onChangeText": [MockFunction],
                "onDragStart": [MockFunction],
                "onDrop": [MockFunction],
                "onFocus": [Function],
                "placeholder": undefined,
                "placeholderTextColor": "#bbb",
                "returnKeyType": "next",
                "style": Object {
                  "color": "#fff",
                  "flex": 14,
                  "fontSize": 18,
                  "minHeight": undefined,
                  "padding": 20,
                },
                "textAlignVertical": "center",
                "underlineColorAndroid": "transparent",
                "value": "mockValue",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
