// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Donations /> Expect to have unit tests specified 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Donations
    donations={Array []}
    viewDetail={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Component
        style={
          Object {
            "height": "100%",
          }
        }
      >
        <DonationsHeader />
        <ScrollViewMock>
          <Component
            style={
              Object {
                "flexDirection": "row",
                "flexWrap": "wrap",
                "padding": 7.5,
              }
            }
          />
        </ScrollViewMock>
      </Component>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <DonationsHeader />,
          <ScrollViewMock>
            <Component
              style={
                Object {
                  "flexDirection": "row",
                  "flexWrap": "wrap",
                  "padding": 7.5,
                }
              }
            />
          </ScrollViewMock>,
        ],
        "style": Object {
          "height": "100%",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Component
              style={
                Object {
                  "flexDirection": "row",
                  "flexWrap": "wrap",
                  "padding": 7.5,
                }
              }
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [],
              "style": Object {
                "flexDirection": "row",
                "flexWrap": "wrap",
                "padding": 7.5,
              },
            },
            "ref": null,
            "rendered": Array [],
            "type": [Function],
          },
          "type": [MockFunction],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Component
          style={
            Object {
              "height": "100%",
            }
          }
        >
          <DonationsHeader />
          <ScrollViewMock>
            <Component
              style={
                Object {
                  "flexDirection": "row",
                  "flexWrap": "wrap",
                  "padding": 7.5,
                }
              }
            />
          </ScrollViewMock>
        </Component>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <DonationsHeader />,
            <ScrollViewMock>
              <Component
                style={
                  Object {
                    "flexDirection": "row",
                    "flexWrap": "wrap",
                    "padding": 7.5,
                  }
                }
              />
            </ScrollViewMock>,
          ],
          "style": Object {
            "height": "100%",
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Component
                style={
                  Object {
                    "flexDirection": "row",
                    "flexWrap": "wrap",
                    "padding": 7.5,
                  }
                }
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [],
                "style": Object {
                  "flexDirection": "row",
                  "flexWrap": "wrap",
                  "padding": 7.5,
                },
              },
              "ref": null,
              "rendered": Array [],
              "type": [Function],
            },
            "type": [MockFunction],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
