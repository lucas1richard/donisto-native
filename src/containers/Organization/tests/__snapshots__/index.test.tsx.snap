// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Organization /> Expect to have unit tests specified 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Organization
    activeOrg={
      Object {
        "name": "any",
      }
    }
    organizationUuid="string"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <H1
          color="default"
        >
          Organization
        </H1>,
        <H2
          color="default"
        >
          any
        </H2>,
        <Button
          color="secondary"
          onPress={[Function]}
          title="Switch to Donor Mode"
          variant="contained"
        />,
      ],
      "style": Object {
        "padding": 12,
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Organization",
          "color": "default",
        },
        "ref": null,
        "rendered": "Organization",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "any",
          "color": "default",
        },
        "ref": null,
        "rendered": "any",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "color": "secondary",
          "onPress": [Function],
          "title": "Switch to Donor Mode",
          "variant": "contained",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <H1
            color="default"
          >
            Organization
          </H1>,
          <H2
            color="default"
          >
            any
          </H2>,
          <Button
            color="secondary"
            onPress={[Function]}
            title="Switch to Donor Mode"
            variant="contained"
          />,
        ],
        "style": Object {
          "padding": 12,
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Organization",
            "color": "default",
          },
          "ref": null,
          "rendered": "Organization",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "any",
            "color": "default",
          },
          "ref": null,
          "rendered": "any",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "color": "secondary",
            "onPress": [Function],
            "title": "Switch to Donor Mode",
            "variant": "contained",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`<Organization /> Expect to have unit tests specified 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Organization />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <ScrollViewMock>
        <Component
          style={
            Object {
              "padding": 12,
            }
          }
        >
          <H1
            color="default"
          >
            You're not associated to any organization yet
          </H1>
          <Connect(RegisterNewOrg) />
          <Button
            color="secondary"
            onPress={[Function]}
            title="Switch to Donor Mode"
            variant="contained"
          />
        </Component>
      </ScrollViewMock>,
      "style": Object {
        "flex": 1,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Component
          style={
            Object {
              "padding": 12,
            }
          }
        >
          <H1
            color="default"
          >
            You're not associated to any organization yet
          </H1>
          <Connect(RegisterNewOrg) />
          <Button
            color="secondary"
            onPress={[Function]}
            title="Switch to Donor Mode"
            variant="contained"
          />
        </Component>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <H1
              color="default"
            >
              You're not associated to any organization yet
            </H1>,
            <Connect(RegisterNewOrg) />,
            <Button
              color="secondary"
              onPress={[Function]}
              title="Switch to Donor Mode"
              variant="contained"
            />,
          ],
          "style": Object {
            "padding": 12,
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "You're not associated to any organization yet",
              "color": "default",
            },
            "ref": null,
            "rendered": "You're not associated to any organization yet",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "color": "secondary",
              "onPress": [Function],
              "title": "Switch to Donor Mode",
              "variant": "contained",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [MockFunction],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <ScrollViewMock>
          <Component
            style={
              Object {
                "padding": 12,
              }
            }
          >
            <H1
              color="default"
            >
              You're not associated to any organization yet
            </H1>
            <Connect(RegisterNewOrg) />
            <Button
              color="secondary"
              onPress={[Function]}
              title="Switch to Donor Mode"
              variant="contained"
            />
          </Component>
        </ScrollViewMock>,
        "style": Object {
          "flex": 1,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Component
            style={
              Object {
                "padding": 12,
              }
            }
          >
            <H1
              color="default"
            >
              You're not associated to any organization yet
            </H1>
            <Connect(RegisterNewOrg) />
            <Button
              color="secondary"
              onPress={[Function]}
              title="Switch to Donor Mode"
              variant="contained"
            />
          </Component>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <H1
                color="default"
              >
                You're not associated to any organization yet
              </H1>,
              <Connect(RegisterNewOrg) />,
              <Button
                color="secondary"
                onPress={[Function]}
                title="Switch to Donor Mode"
                variant="contained"
              />,
            ],
            "style": Object {
              "padding": 12,
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "You're not associated to any organization yet",
                "color": "default",
              },
              "ref": null,
              "rendered": "You're not associated to any organization yet",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "color": "secondary",
                "onPress": [Function],
                "title": "Switch to Donor Mode",
                "variant": "contained",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [MockFunction],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
